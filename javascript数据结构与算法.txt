O(n)的理解：
时间复杂度这个东西，其实更准确点说应该是描述一个算法在问题规模不断增大时对应的时间增长曲线。所以这些增长数量级不是一个准确的性能评价，可以理解为一个近似值，时间的增长近似于logN、NlogN的曲线。
O(x)指的是时间复杂度。
O(1)对应哈希表，每次查找都由唯一下标查找，只需要一次查找就能返回结果。例如去买烟，顾客说出烟名，老板直接给烟;
O(n)随着样本数量的增加，复杂度随之线性增加。需要序贯处理的算法的复杂度都不回低于O(n)。例如数数1-100要100秒，1-200不少于200秒;
O(n^2)计算复杂度随着样本数量的增加呈平方数增加。例如从n张试卷中取出分数最高的，然后再取第二的。。。需要反复n次。每次的复杂度是O(n)，执行n次,所以时间复杂度为O(n^2);
O(nlogn) 例如二叉搜索树。前提为n张试卷已经按分数高低排好，取分数为59的，先取中间那张，如果大于59则取上面的，再从上半部分中间取出一张跟59对比。。。
n/2^k = 1 => k = log2n.

1、栈
	栈是一种遵从后进先出(LIFO)原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。
	function Stack(){
		var items = [];
		// 添加元素
		this.push = function(ele){
			items.push(ele);
		}
		// 移除并返回最后一个元素
		this.pop = function(){
			return items.pop();
		}
		// 返回最后一个元素
		this.peek = function(){
			return items[items.length - 1];
		}
		this.isEmpty = function(){
			return items.length < 1;
		}
		this.clear = function(){
			items = [];
		}
		this.size = function(){
			return items.length;
		}
	}
	
	// 将十进制数字转化为其他进制
	function baseConverter(num, base){
		var res = [],
			digits = '0123456789ABCDEF';
		
		while(num > 0){
			res.unshift(num % base);
			num = Math.floor(num / base);
		}
				
		return res.map(function(item){
			return digits[item]
		}).join('');
	}

2、队列
	队列是遵循先进先出(FIFO)原则的一组有序的想。队列的尾部添加新元素，并从顶部移除元素。
	function Queue(){
		var items = [];
		// 添加元素
		this.enqueue = function(ele){
			items.push(ele);
		}
		// 移除并返回队列中的第一个元素
		this.dequeue = function(){
			return items.shift();
		}
		// 返回队列中第一个元素
		this.front = function(){
			return items[0]
		}
		this.isEmpty = function(){
			return items.length < 1;
		}
		this.clear = function(){
			items = [];
		}
		this.size = function(){
			return items.length;
		}
	}
	
	// 优先级队列
	function PriorityQueue(){
		var items = [];
		
		function QueueElement(ele,priority){
			this.element = ele;
			this.priority = priority;
		}
		
		this.enqueue = function(ele,priority){
			var queueEle = new QueueElement(ele,priority);
			//var _index = //items.findIndex(e=>e.priority>queueEle.priority)
			//if(_index < 0){
			//	items.push(queueEle)
			//} else {
			//	items.splice(_index,0,queueEle)
			//}
			// 注释的代码可以代替下面代码
			if(items.length<1){
				items.push(queueEle);
			} else {
				var added = false;
				for(var i=0;i<items.length;i++){
					if(queueEle.priority < items[i].priority){
						items.splice(i,0,queueEle);
						added = true;
						break;
					}
				}
				if(!added){
					items.push(queueEle)
				}
			}
			
		}
	}
	
	// 循环队列
	function hotPotato(names,num){
		var queue = new Queue();
		for(var i=0;i<names.length;i++){
			queue.enqueue(names[i]); // 将数据加入队列
		}
		var eliminated = '';
		while(queue.size() > 1){
			for(var i=0; i < num; i++){
				queue.enqueue(queue.dequeue());
			}
			eliminated = queue.dequeue();
			console.log('淘汰-->' + eliminated);
		}
		return queue.dequeue();
	}
	
	var names = ['A','B','C','D','E'];
	var winner = hotPotato(names, 7);
	console.log('winner-->' + winner);
	
3、链表
	链表存储有序的元素集合，不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用组成。相对于传统的数组，链表的好处在于，添加或移除元素的时候不需要移动其他元素。
	
	① 创建链表
	function LinkList(){
		var Node = function(element){
			this.element = element;
			this.next = null;
		}
		
		var length = 0;
		var head = null;
		
		// 向列表尾部添加一个元素
		this.append = function(element){
			var node = new Node(element);
			var current;
			if(head===null){
				head = node;
			}else{
				current = head;
				while(current.next){
				// 取得最后一个元素，最后一个元素的next为Null
					current = current.next;
				}
				current.next = node;
			}
			length++;
		}
		
		// 删除指定位置的元素
		this.removeAt = function(position){
			if(position>-1 && position<length){
				var current = head,
					previous,
					index = 0;
				if(position === 0){
					head = current.next;
				}else{
					while(index++ < position){
					// 这里需要取position位置的前一个元素,赋给previous
						previous = current;
					// 取到position位置的元素，previous的next就是position位置元素
						current = current.next;
					}
					// 将previous的next指向Position位置元素的下一个元素，达到跳过position位置元素的目的
					previous.next = current.next;
				}
				length--;
				return current.element;
			} else {
				return null;
			}
		}
		
		// 向列表指定位置插入一个元素
		this.insert = function(position,element){
			if(position>-1 && position <= length){
				var node = new Node(element),
					current = head,
					previous,
					index = 0;
				if(position===0){
					node.next = current;
					head = node;
				} else {
					while(index++ < position){
						previous = current;
						current = current.next;
					}
					node.next = current;
					previous.next = node;
				}
				length++;
				return true;
			} else {
				return false;
			}
		}
		
		// 从列表中移除一个元素
		this.remove = function(element){
			var index = this.indexOf(element);
			this.removeAt(index);
		}
		// 判断元素是否在列表中，如果在返回索引，否则返回-1
		this.indexOf = function(element){
			var current = head,
				index = -1;
			while(current){
				if(element === current.element){
					return index;
				}
				index++;
				current = current.next;
			}
			return -1;
		}
		this.isEmpty = function(){
			return length === 0;
		}
		this.size = function(){
			return length;
		}
		this.toString = function(){
			var current = head,
				string = '';
			while(current){
				string = current.element;
				current = current.next;
			}
			return string;
		}
		this.print = function(){
			console.log(this.toString());
		}	
	}
	
	es6写法
	class Node {
	  constructor(element) {
		this.element = element;
		this.next = null;
	  }
	}
	let length = new WeakMap();
	const head = new WeakMap();
	class LinkList {
	  constructor() {
		length.set(this, 0);
		head.set(this, null);
	  }
	  append(element) {
		let node = new Node(element),
		  current;
		if (this.header() === null) {
		  head.set(this, node)
		} else {
		  current = this.header();
		  while (current.next) {
			current = current.next;
		  }
		  current.next = node;
		}
		this.setL(1);
	  }

	  removeAt(position) {
		let l = this.size();
		if (position > -1 && position < l) {
		  let current = this.header(),
			previous,
			index = 0;
		  if (position === 0) {
			head.set(this, current.next)
		  } else {
			while (index++ < position) {
			  previous = current;
			  current = current.next;
			}
			previous.next = current.next;
		  }
		  this.setL(-1);
		  return current.element;
		} else {
		  return null;
		}
	  }

	  insert(position, element) {
		if (position > -1 && position <= this.size()) {
		  let node = new Node(element),
			current = this.header(),
			previous,
			index = 0;
		  if (position === 0) {
			node.next = current;
			head.set(this, node);
		  } else {
			while (index++ < position) {
			  previous = current;
			  current = current.next;
			}
			node.next = current;
			previous.next = node;
		  }
		  this.setL(1);
		  return true;
		} else {
		  return false;
		}
	  }

	  remove(element) {
		const index = this.indexOf(element);
		this.removeAt(index);
	  }

	  indexOf(element) {
		let current = this.header(),
		  index = 0;
		while (current) {
		  if (element === current.element) {
			return index;
		  }
		  index++;
		  current = current.next;
		}
		return -1;
	  }

	  getItem(index) {
		let current = this.header(),
		  _index = 0;
		while (_index++ < index) {
		  current = current.next
		}
		return current;
	  }

	  isEmpty() {
		return this.size() === 0;
	  }

	  toString() {
		let current = this.header(),
		  string = '';
		while (current) {
		  string += JSON.stringify(current.element) + (current.next ? ', ' : '');
		  current = current.next;
		}
		return string;
	  }

	  print() {
		console.log(this.toString());
	  }

	  size() {
		return length.get(this);
	  }
	  setL(n) {
		let l = this.size();
		l += n;
		length.set(this, l);
	  }
	  header() {
		return head.get(this);
	  }
	}
	export default LinkList
	
	②双向链表
	双向链表和普通链表的区别在于，双向链表的及节点是双向的，前一个，后一个。
	
	function DoublyLinkList(){
		var Node = function(element){
			this.element = element;
			this.next = null;
			this.prev = null;
		}
		
		var length = 0;
		var head = null;
		var tail = null;
		
		this.insert = function(pos,element){
			var node = new Node(element),
				current = head,
				previous,
				index = 0;
			if(pos >= 0 && pos <= length){
				if(pos === 0){
					if(!head){
						head = node;
						tail = node;
					} else {
						node.next = current;
						current.prev = node;
						head = node;
					}
				} else if(pos === length){
					current = tail;
					current.next = node;
					node.prev = current;
					tail = node;
				} else {
					while(index++ < pos){
						previous = current;
						current = current.next;
					}
					node.next = current;
					previous.next = node;
					
					current.prev = node;
					node.prev = previous;
				}
				length++;
				return true;
			} else {
				return false;
			}
		}
		
		this.removeAt = function(pos){
			if(pos > -1 && pos < length){
				var current = head,
					previous,
					index = 0;
				if(pos == 0){
					head = current.next;
					if(length === 1){
						tail = null;
					} else {
						head.prev = null;
					}
				} else if(pos === length - 1){
					current = tail;
					tail = current.prev;
					tail.next = null;
				} else {
					while(index++ < pos){
						previos = current;
						current = current.next;
					}
					
					previos.next = current.next;
					current.next.prev = previos;
				}
				
				length--;
				
				return current.element;
			} else {
				return null;
			}
		}
	}
	
	双向链表ES6
	class Node {
	  constructor(element) {
		this.element = element;
		this.prev = null;
		this.next = null;
	  }
	}

	const length = new WeakMap();
	const head = new WeakMap();
	const tail = new WeakMap();

	class DbLinkList {
	  constructor() {
		length.set(this, 0);
		head.set(this, null);
		tail.set(this, null);
	  }
	  append(element) {
		let node = new Node(element),
		  current;
		if (!head.get(this)) {
		  head.set(this, node);
		} else {
		  current = head.get(this);
		  while (current.next) {
			current = current.next;
		  }
		  current.next = node;
		  node.prev = current;
		  tail.set(this, node);
		}
		let l = length.get(this);
		l++;
		length.set(this, l);
	  }

	  insert(pos, element) {
		let node = new Node(element),
		  current = head.get(this),
		  previous,
		  index = 0;
		if (pos >= 0 && pos <= length.get(this)) {
		  if (pos === 0) {
			if (!this.header()) {
			  head.set(this, node);
			  tail.set(this, node);
			} else {
			  node.next = current;
			  current.prev = node;
			  head.set(this, node);
			}
		  } else if (pos === this.size()) {
			current = tail.get(this);
			current.next = node;
			node.prev = current;
			tail.set(this, node);
		  } else {
			while (index++ < pos) {
			  previous = current;
			  current = current.next;
			}
			node.next = current;
			previous.next = node;

			current.prev = node;
			node.prev = previous;
		  }
		  let l = this.size();
		  l++;
		  length.set(this, l);
		  return true;
		} else {
		  return false;
		}
	  }

	  removeAt(pos) {
		let len = this.size();
		if (pos > -1 && pos < len) {
		  let current = this.header(),
			previous,
			index = 0;
		  if (pos === 0) {
			head.set(this, current.next);
			if (len === 1) {
			  tail.set(this, null);
			} else {
			  head.prev = null;
			}
		  } else if (pos === len - 1) {
			current = this.tailer();
			tail.set(this, current.prev);
			tail.next = null;
		  } else {
			while (index++ < pos) {
			  previous = current;
			  current = current.next;
			}
			previous.next = current.next;
			current.next.prev = previous;
		  }
		  len--;
		  length.set(this, len);
		  return current.element;
		} else {
		  return null;
		}
	  }

	  remove(element) {
		const _index = this.indexOf(element);
		this.removeAt(_index);
	  }

	  indexOf(element) {
		let current = this.header(),
		  index = 0;
		while (current) {
		  if (element === current.element) {
			return index;
		  }
		  index++;
		  current = current.next;
		}
		return -1;
	  }

	  size() {
		return length.get(this);
	  }
	  header() {
		return head.get(this);
	  }
	  tailer() {
		return tail.get(this);
	  }
	  toString() {
		let current = head.get(this),
		  string = '';
		while (current) {
		  string += JSON.stringify(current.element) + (current.next ? ', ' : '');
		  current = current.next;
		}
		return string;
	  }
	  print() {
		console.log(this.toString());
	  }
	}
	
	③循环链表
	循环链表可以像链表一样有单向引用，也可以像双向链表一样有双向引用。
	单向循环链表tail.nex指向head。
	双向循环链表的tail.next指向head,head.prev指向tail
	
4、集合
	集合是由一组无序且唯一的想组成。这个数据结构使用了有限集合相同的数学概念，但应用在计算机科学的数据结构中。
	
	es5
	function Set(){
		var items = {};
		this.add = function(val){
			if(!this.has(val)){
				items[val] = val;
				return true;
			}
			return false;
		}
		this.remove = function(val){
			if(this.has(val)){
				delete items[val];
				return true;
			}
			return false;
		}
		this.has = function(val){
			return items.hasOwnProperty(val);
		}
		this.clear = function(){
			items = {};
		}
		this.size = function(){
			return Object.keys(items).length;
		}
		this.values = function(){
			return Object.values(items);
		}
		
		// 并集
		this.union = function(otherSet){
			var res = new Set();
			var values = this.values();
			values.map(e=>res.add(items[e]));
			var otherValues = otherSet.values();
			otherValues.map(e=>res.add(items[e]));
			
			return res;
		}
		
		// 交集
		this.intersection = function(otherSet){
			var res = new Set();
			var values = this.values();
			values.filter(e=>otherSet.has(e)).map(e=>res.add(e));
			return res;
		}
		
		// 差集
		this.difference = function(otherSet){
			var res = new Set();
			var values = this.values();
			values.filter(e=>!otherSet.has(e)).map(e=>res.add(e));
			return res;
		}
		
		// 子集 此集合是否是对比集合的子集
		this.subSet = function(otherSet){
			if(this.size() > otherSet.size()){
				return
			} else {
				var values = this.values();
				return values.every(e=>otherSet.has(e))
			}
		}
	}
	es6 可以直接使用Set类
	
5、字典
	字典是存储的[键，值]对，其中键名是用来查询特定元素的。字典和集合的区别集合以[值，值]的形式存储元素。字典也称作映射。
	
	function Dictionary(){
		var items = {};
		this.set = function(key,val){
			items[key] = val;
		}
		this.remove = function(key){
			if(this.has(key)){
				delete items[key];
				return true;
			}
			return false;
		}
		this.has = function(key){
			return items.hasOwnProperty(key);
		}
		this.get = function(key){
			return this.has(key) ? items[key] : undefined;
		}
		this.clear = function(){
			items = {};
		}
		this.size = function(){
			return Object.keys(items).length;
		}
		this.keys = function(){
			return Object.keys(items);
		}
		this.values = function(){
			return Object.values(items);
		}
	}
	
6、散列表 HashMap
	非顺序数据结构。散列算法的作用是尽可能快的在数据结构中找到一个值。是Dictionary类的一种散列表实现方式。
	
	function HashTable(){
		var table = [];
		var loseloseHashCode = function(key){
			var hash = 0;
			for(var i=0;i<key.length;i++){
				hash += key.charCodeAt(i);
			}
			return hash % 37;
		}
		this.put = function(key,value){
			var position = loseloseHashCode(key);
			console.log(position + '->' + key);
			table[position] = value;
		}
		this.remove = function(key){
			table[loseloseHashCode(key)] = undefined;
		}
		this.get = function(key){
			return table[loseloseHashCode(key)];
		}
	}
	
	解决散列表冲突(键名相同时候，后加入的会覆盖之前的)
	1、分离链接:包括为散列表的每一个位置创建一个链表并将元素存储在里面。是解决冲突最简单的办法，但是这种方法在HashTable实例之外还需要额外的存储空间。
	function HashTable(){
		var table = [];
		var loseloseHashCode = ...
		var ValuePair = function(key,value){
			this.key = key;
			this.value = value;
			this.toString = function(){
				return `[${this.key}->${this.value}`
			}
		}
		this.put = function(key,value){
			var pos = loseloseHashCode(key);
			
			if(table[pos] == undefined){
				table[pos] = new LinkList();
			}
			table[pos].append(new ValuePair(key, value));
		}
		this.get = function(key){
			var pos = loseloseHashCode(key);
			if(table[pos]!==undefined){
				var current = table[pos].header();
				while(current.next){
					if(current.element.key===key){
						return current.element.value;
					}
					current = current.next;
				}
				if(current.element.key===key){
					return current.element.value;
				}
			}
			return undefined;
		}
		this.remove = function(key){
			var pos = loseloseHashCode(key);
			var current = table[pos].header();
			while(current.next){
				if(current.element.key === key){
					table[pos].remove(current.element);
					if(table[pos].isEmpty()){
						table[pos] = undefined;
						// 个人倾向于使用
						// delete table[pos]
					}
					return true;
				}
				current = current.next;
			}
			if(current.element.key === key){
				table[pos].remove(current.element);
				if(table[pos].isEmpty()){
					table[pos] = undefined;
				}
				return true;
			}
		}
		
	}
	
	2、线性探查:当向表中index位置加入一个新元素时，如果index位置已经有值，就尝试index+1位置,如果index+1也有值，尝试index+2，以此类推。

	  this.put = function (key, value) {
		var pos = loseloseHashCode(key);
			if (table[pos] === undefined) {
				table[pos] = new ValuePair(key, value);
			} else {
				var index = ++pos;
				while (table[index] !== undefined) {
					index++;
				}
				table[index] = new ValuePair(key, value);
			}
	  }
	  this.get = function(key){
		var pos = loseloseHashCode(key);
		if(table[pos]!==undefined){
			if(table[pos].key === key){
				return table[pos].value;
			} else {
				var index = ++pos;
				// 这里判断是否undefined是为了确认是否有删除的项
				while(table[index]===undefined || table[index].key!==key){
					index++;
				}
				if(table[pos].key === key){
					return table[index].value;
				}
			}
		}
		return undefined;
	  }
	  this.remove = function(key){
		var pos = loseloseHashCode(key);
		if(table[pos]!==undefined){
			if(table[pos].key === key){
				table[pos] = undefined;
			} else {
				var index = ++pos;
				while(table[index]===undefined || table[index].key!==key){
					index++;
				}
				if(table[pos].key === key){
					table[index] = undefined;
				}
			}
		}
		return undefined;
	  }
	  
	  3、社区推荐散列表实现方式：使用djb2HashCode实现散列函数代替loselose函数.不是最好的散列函数，但是社区推荐的散列函数之一。
		var djb2HashCode = function(key){
			var hash = 5381;
			for(var i=0;i<key.length;i++){
				hash = hash * 33 + key.charCodeAt(i);
			}
			return hash % 1013;
		}
		
7、树：非顺序数据结构。一个树结构包含一系列存在父子关系的节点。树顶部叫根节点，它没有父节点。树中每个元素都叫做节点，至少又一个子节点的叫内部节点，没有子节点的叫外部节点或叶节点。

	二叉树:节点最多只能有左右两个子节点
	function BinarySeacrhTree(){
		var Node = function(key){
			this.key = key;
			this.left = null;
			this.right = null;
		}
		var root = null;
		
		function insertNode(node,newNode){
			if(newNode.key < node.key){
				if(node.left === null){
					node.left = newNode;
				} else {
					insertNode(node.left, newNode);
				}
			} else {
				if(node.right === null){
					node.right = newNode;
				} else {
					insertNode(node.right, newNode);
				}
			}
		}
		
		// 插入节点
		this.insert = function(key){
			var newNode = new Node(key);
			if(root===null){
				root = newNode;
			} else {
				insertNode(root,newNode);
			}
		}
		
		function searchNode(node,key){
			if(node === null){
				return false;
			}
			if(key < node.key){
				return searchNode(node.left,key);
			} else if(key > node.key){
				return searchNode(node.right, key);
			} else {
				return true;
			}
		}
		// 搜索获取节点
		this.search = function(key){
			return searchNode(root,key);
		}
		
		function inTraverseNode(node,cb=function(val){console.log(val)}){
			if(node!==null){
				inTraverseNode(node.left, cb);
				cb(node.key);
				inTraverseNode(node.right, cb);
			}
		}		
		// 通过中序遍历方式遍历所有节点
		this.inOrderTraverse = function(cb){
			inTraverseNode(root,cb);
		}
		
		function preOrderTraverseNode(node,cb=function(val){console.log(val)}){
			if(node!==null){
				cb(node.key);
				preOrderTraverseNode(node.left,cb);
				preOrderTraverseNode(node.right,cb);
			}
		}
		// 通过先序遍历方式遍历所有节点
		this.preOrderTraverse = function(cb){
			preOrderTraverseNode(root,cb)
		}
		function postOrderTraverseNode(node,cb=function(val){console.log(val)}){
			if(node!==null){
				postOrderTraverseNode(node.left,cb);
				postOrderTraverseNode(node.right,cb);
				cb(node.key);
			}
		}
		// 通过后序遍历方式遍历所有界定啊
		this.postOrderTraverse = function(cb){
			postOrderTraverseNode(root,cb)
		}
		// 返回树中最小的值/键
		this.min = function(){
			var node = root;
			if(node){
				while(node && node.left !== null){
					node = node.left;
				}
				return node.key;
			}
			return null;
		}
		// 返回树中最大的值/键
		this.max = function(){
			var node = root;
			if(node){
				while(node && node.right !== null){
					node = node.right;
				}
				return node.key;
			}
			return null;
		}
		
		function removeNode(node,key){
			if(node === null){ // 2
				return null;
			}
			if(key < node.key){ // 3
				node.left = removeNode(node.left,key); // 4
				return node; // 5
			} else if(key > node.key){ // 6
				node.right = removeNode(node.right,key); // 7
				return node; // 8
			} else {
				// 键等于node.key
				// 一个叶节点
				if(node.left === null && node.right === null){ // 9
					node = null; // 10
					return node; // 11
				}
				
				// 只有一个子节点的节点
				if(node.left === null){ // 12
					node = node.right; // 13
					return node; // 14
				} else if(node.right === null){ // 15
					node = node.right; // 16
					return node; // 17
				}
			
				// 有两个子节点的节点
				var aux = (function(n){
					while(n && n.left !== null){
						n = n.left;
					}
					return n;
				})(node.right) // 18
				node.key = aux.key; // 19
				node.right = removeNode(node.right, aux.key); // 20
				return node; // 21
			}
		}
		// 删除一个键
		this.remove = function(key){
			root = removeNode(root,key);
		}
	}

	//定义节点
	class Node {
	  constructor(key) {
		this.key = key;
		this.left = null;
		this.right = null
	  }
	}
	//创建二叉搜索树(BST)）
	class BinarySearchTree {
	  constructor() {
		this.root = null
	  }
	  //插入节点
	  insert(key) {
		const newNode = new Node(key);
		const insertNode = (node, newNode) => {
		  if (newNode.key < node.key) {
			if (node.left === null) {
			  node.left = newNode
			} else {
			  insertNode(node.left, newNode)
			}
		  } else {
			if (node.right === null) {
			  node.right = newNode
			} else {
			  insertNode(node.right, newNode)
			}

		  }
		};
		if (!this.root) {
		  this.root = newNode
		} else {
		  insertNode(this.root, newNode)

		}
	  }
	  //中序遍历
	  inOrder() {
		let backs = [];
		const inOrderNode = (node, callback) => {
		  if (node !== null) {
			inOrderNode(node.left, callback);
			backs.push(callback(node.key));
			inOrderNode(node.right, callback)
		  }
		};
		inOrderNode(this.root, callback);

		function callback(v) {
		  return v
		}
		return backs
	  }
	  //前序遍历
	  preOrder() {
		let backs = [];
		const preOrderNode = (node, callback) => {
		  if (node !== null) {
			backs.push(callback(node.key));
			preOrderNode(node.left, callback);
			preOrderNode(node.right, callback)
		  }
		};
		preOrderNode(this.root, callback);

		function callback(v) {
		  return v
		}
		return backs
	  }
	  //后序遍历
	  postOrder() {
		let backs = [];
		const postOrderNode = (node, callback) => {
		  if (node !== null) {
			postOrderNode(node.left, callback);
			postOrderNode(node.right, callback);
			backs.push(callback(node.key))
		  }
		};
		postOrderNode(this.root, callback);

		function callback(v) {
		  return v
		}
		return backs
	  }
	  //查找最小值
	  getMin(node) {
		const minNode = node => {
		  return node ? (node.left ? minNode(node.left) : node) : null
		};
		return minNode(node || this.root)
	  }
	  //查找最大值
	  getMax(node) {
		const minNode = node => {
		  return node ? (node.right ? minNode(node.right) : node) : null
		};
		return minNode(node || this.root)
	  }
	  //查找特定值
	  find(key) {
		const findNode = (node, key) => {
		  if (node === null) return false;
		  if (node.key === key) return node;
		  return findNode((key < node.key) ? node.left : node.right, key)
		};
		return findNode(this.root, key)

	  }
	  //删除节点
	  remove(key) {
		const removeNode = (node, key) => {
		  if (node === null) return null;
		  if (node.key === key) {
			if (node.left === null && node.right === null) return null;
			if (node.left === null) return node.right;
			if (node.right === null) return node.left;
			if (node.left !== null && node.right !== null) {
			  let _node = this.getMin(node.right);
			  node.key = _node.key;
			  node.right = removeNode(node.right, key);
			  return node
			}
		  } else if (key < node.key) {
			node.left = removeNode(node.left, key);
			return node
		  } else {
			node.right = removeNode(node.right, key);
			return node
		  }
		};
		return removeNode(this.root, key)
	  }
	}








	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
