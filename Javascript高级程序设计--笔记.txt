一、JS数据类型：
	基本类型(栈) ：Undefined、Null、Boolean、Number、String
	引用类型(堆) ：Object（Object,Array,Date,RegExp,Function,
			基本包装类型（BooleanObject,NumberObject,StringObject））

	栈是一种LIFO（Last-In-First-Out,后进先出）的数据结构
	队列数据结构FIFO（First-In-First-Out,先进先出）

二、JS执行机制：
	1、判断同步还是异步，同步任务放入主线程，异步任务放入evnet table;
	2、异步任务在event table中注册函数，满足条件后推入event unique;
	3、同步任务进入主线程执行，直到主线程空闲时，查看event unique中是否有可执行的异步任务，有的话推入主线程。
	以上三步循环执行形成event loop.
	macro-task(宏任务)：script,setTimeout,setInterval
	micro-tast(微任务): Promise.then,process.nextTick
	在执行一个宏任务过程中遇到微任务，就将其放入event unique;
	当宏任务执行完成后，查看微任务的event unique,并将里面的全部微任务依次执行完。
	

三、内存回收
	全局变量不用的情况下可以手动解除引用(赋值null)，以便JS垃圾收集器下次运行时将其回收。

四、 面对对象程序设计模式
	1、工厂模式：
    function createPerson(name,age,job){
       var  o =  new Object();
       o.name = name;
       o.age = age;
       o.job = job; 
       o.sayName = function(){
          console.log(this.name)	
       }
       return o;
    }
    var person1 = createPerson('老张',25,'Software Engineer');
    var person2 = createPerson('老王',23,'Doctor')
    缺点：无法判断person1是否是createPerson类型

   2、构造函数模式:
	function Person(name,age,job){
		this.name = name;
		this.age = age;
		this.job = job;
		this.sayName = function(){
			console.log(this.name)
		}
	}
	var person1 = new Person('老张',22,'Software Engineer');
	var person2 = new Person('小李',20,'nurse');
	① 创建一个新对象;
	② 将构造函数的作用域赋给新对象(this指向此新对象);
	③ 执行构造函数代码(为此对象添加属性);
	④ 返回新对象;
	person1/2.constructor == Person // true
	person1/2 instanceof Person // true
	缺点：每个实例都会用不同的Function实例，可以单独把方法提出来(暴露到全局作用域)，但是提出来的函数过多又会影响封装性。
	
	3、原型模式：
	function Person(){}
	Person.prototype.name = '老张';
	Person.prototype.age = 22;
	Person.prototype.job = 'Software Engineer';
	Person.prototype.sayName = function(){
		console.log(this.name)
	}
	var person1 = new Person();
	var person2 = new Person();
	person1.constructor == Person // true
	firefox,safari,chrome 实例对象支持通过__proto__访问原型对象
	person1.__proto__ == Object.getPrototypeOf(person1) == Person.prototype // true
	① 实例对象在取某属性时，会执行一次搜索，先查找实例属性，找到就返回，没找到就继续搜索原型对象;
	② 实例对象在添加属性时，如原型对象有同属性名属性，则实例属性会屏蔽原型属性，可以使用delete此属性删除此实例属性后，再次访问原型属性
	  person1.age = 18;
	  console.log(person1.age) // 18
	  person2.age = 22;
	  delete person1.name;
	  console.log(person1.name) // 22;
	③ 实例对象可使用hasOwnProperty()检测改属性是否是来自实例：
	  person1.hasOwnProperty('name') // false
	  person1.name = '老王';
	  person1.hasOwnProperty('name') // true
	  'name' in person1
	④ in 操作符；
		无论name属性是原型属性还是实例属性，只要有该属性，都返回true
		for in 可以使用Object.keys()代替;
		Object.getOwnPropertyNames()能得到所有的实例属性，无论属性是否可枚举;
	⑤ 原生对象通过原型拓展方法
	  String.prototype.startWith = function(str){ return this.indexOf(str) == 0 }
	  var msg = 'Hello World!';
	  console.log(msg.startWith('Hello'))
		
	缺点：共享属性导致，修改单一实例属性导致原型中改属性值变化，从而导致其他实例属性也会变化；
	
	4、构造函数+原型模式组合模式：
	function Person(name,age,job){
		this.name = name;
		this.age = age;
		this.job = job;
		this.friends = ['A','B']
	}
	Person.prototype = {
		constructor: Person,
		sayName: function(){
			console.log(this.name)
		}
	}
	var person1 = new Person('laozhang',29,'Software Engineer');
	var person2 = new Person('xiaoli',27,'Nurse');
	person1.friends.push('C');
	
	person1.friends === person2.friends; // false
	person1.sayName === person2.sayName; // true
	
	这种模式是当前使用最广泛、认知度最高的方式
	
	5、动态原型模式：(在构造函数基础上动态添加原型属性)
	function Person(name,age,job){
		this.name = name;
		this.age = age;
		this.job = job;
		if(typeof this.sayName != 'function'){
			Person.prototype.sayName = function(){
				console.log(this.name)
			}
		}
	}
	var f = new Person('laowang',28,'Software Engineer');
	f.sayName();
	不能使用对象字面量重写原型，会导致切断实例与原型之间的联系;
	
	6、寄生构造函数模式：(其实就是一个工厂模式)
	function Person(name,age,job){
		var o = new Object();
		o.name = name;
		o.age = age;
		o.job = job;
		o.sayName = function(){console.log(this.name)}
		return o;
	}
	此模式用来为特殊需求对象创建构造函数，例如：需要创建一个有额外方法的数组，不能修改Array构造函数。
	function SpecialArray(){
		var arr = new Array();
		arr.push.apply(arr, arguments);
		// 添加额外方法
		arr.toPipedString = function(){
			return this.join(' | ')
		}
		return arr;
	}
	var colors = new SpecialArray('red','green','blue');
	console.log(colors.toPipedString());// 'red | green | blue'
	
	缺点：返回的对象与构造函数或者构造函数的原型属性之间没有关系，所以不能用instanceof判断对象类型，个人觉得就是一个工厂模式。
	
	7、稳妥构造函数模式：
	function Person(name,age,job){
		var o = new Object();
		// 这里可以设置私有属性或方法
		o.sayName = function(){console.log(name)}
		o.changeName = function(){this.name = 'asdasd'}
		return o
	}
	var f = Person('laozhang',24,'Software Engineer');
	f.sayName();
	只通过函数访问实例原始数据，无法修改。同样无法使用instanceof判断对象类型
	
五、继承：
	1、原型链继承：利用原型让一个引用类型继承另一个引用类型的属性和方法。
		function SuperType(){
			this.aaa = 1;
			this.arr = [1,2,3,4]
		}
		SuperType.prototype.getValue = function(){return this.aaa}
		function SubType(){
			this.aaa = 2;
		}
		SubType.prototype = new SuperType();
		SubType.prototype.getSubValue = function(){return this.bbb;}
		var ins1 = new SubType();
		ins1.arr.push(5)
		ins1.arr;// [1,2,3,4,5]
		var ins2 = new SubType();
		ins2.arr;// [1,2,3,4,5]
		console.log(ins1.getValue()) // 2
		ins1 instanceof SuperType // true
		子对象中有与父对象同名的属性或方法时，会优先读取子对象属性或方法;
		不能使用对象字面量创建出原型方法，会导致原型链被切断。
		
		缺点：由于共享父对象数据，如果其中一个子对象实例修改了父对象引用类型数据，会导致另一个子对象实例所继承的数据发生改变
	
	2、借用构造函数：在子类型构造函数的内部调用父类型构造函数
		function SuperType(arg){
			this.name = arg[0]
			this.colors = ['red','green','blue']
		}
		function SubType(){
			SuperType.apply(this,arguments)
		}
		var ins1 = new SubType('suibianla');
		ins1.colors.push('black');
		ins1.colors; // 'red,green,blue,black'
		var ins2 = new SubType();
		ins.colors; // 'red,green,blue'
		
		缺点： 方法都在父对象中定义，对子对象不可见。
		
	3、组合继承：将原型链和借用构造函数组合，使用原型链实现对原型属性和方法的继承，通过构造函数实现对实例属性的继承
		function SuperType(name){
			this.name = name;
			this.arr = [1,2,3,4];
		}
		SuperType.prototype.fn = function(){console.log(this.name)}
		function SubType(name,age){
			SuperType.call(this,name);// 第二次调用SuperType()
			this.age = age;
		}
		
		SubType.prototype = new SuperType();// 第一次调用SuperType()
		SubType.prototype.constructor = SubType;
		SubType.prototype.sayAge = function(){console.log(this.age)}
		
		var ins1 = new SubType('老张',29);
		ins1.arr.push(5)// ins1.arr=> [1,2,3,4,5]
		ins1.fn()// 老张
		ins1.sayAge()// 29
		
		var ins2 = new SubType('小李',27);
		ins2.arr; //=>[1,2,3,4]
		ins2.fn(); // 小李
		ins2.sayAge();// 27
		
		js中最常用的继承模式，可以使用instanceof 和 isPrototypeOf()判断与父原型的关系。
		
		缺点：每次都会调用两次父对象构造函数，创建子对象原型的时候第一次，子对象原型构造函数内部
	
	4、原型式继承：基于已有的对象创建新对象
		// 浅copy
		function object(o){
			function F(){}
			F.prototype = o;
			return new F();
		} === Object.create(o)
		// 已有对象
		var person = {
			name: '老张',
			firends: ['A','B','C']
		}
		// 新对象
		var p1 = object(person);
		p1.name = '小李';
		p1.friends.push('D');
		object函数可以直接使用Object.create()代替
		
		缺点：如果共用属性是引用类型会导致，一个实例改变该属性值的时候引起另一个实例此属性值的变化
		
	5、寄生式继承：创建一个仅用于封装继承过程的函数，在该函数内对对象进行修改，最后返回
		感觉跟原型式继承区别不大
		function createAnother(original){
			var clone = object(original)== Object.create(original)
			clone.fn = funtion(){console.log(this.name)}
			return clone;
		}
		var person = {
			name: 'laozhang',
			friends: ['A','B','C']
		}
		var p1 = createAnother(person)
		p1.fn()// 'laozhang'
		
		缺点：由于在函数内部为对象添加函数，会导致函数不能复用而降低效率
		
	6、寄生组合式继承：子对象使用寄生式继承来继承父对象的原型，再将结果指定给子对象类型的原型
		function inheritPrototype(son,dad){
			var prototype = Object.create(dad.prototype);
			prototype.constructor = son;// 弥补因重写原型导致的失去默认construtor属性
			son.prototype = prototype;
		}
		function Dad(name){
			this.name = name;
			this.arr = ['A','B','C'];
		}
		Dad.prototype.fn = function(){console.log(this.name)}
		function Son(name,age){
			Dad.call(this,name);
			this.age = age;
		}
		inheritPrototype(Son,Dad);
		Son.prototype.fn1 = function(){console.log(this.age)}
		
		此继承方式属于原型链继承和借用构造函数继承组合的优化版本，引用类型最理想的继承方式
		
六、函数
	1、闭包：指有权访问另一个函数作用域中变量的函数。常见方式就是在一个函数内部创建另一个函数。
	2、高阶函数： 函数可以作为参数被传递；函数可以作为返回值输出。
	3、函数柯里化：使用一个闭包绑定一个函数。一个currying函数先接受一些参数，保存起来，
				    继续返回另外一个函数，直到达到执行条件后再调用所有的参数。
					
		var currying = function(fn){
			var args = [];
			return function(){
				if(arguments.lenth==0){
					return fn.apply(this,args)
				}else {
					args.push(arguments);
					return arguments.callee;
				}
			}
		};
		var cost = (function(){
			var money = 0;
			return function(){
				for(var i=0;i<arguments.length;i++){
					money+=arguments[i];
				}
				return money;
			}
		})()
		
		var cost = currying(cost);
		cost(100);
		cost(200);
		cost(300);
		cost(); // 600


		function add(){
			let args = Array.prototype.slice.call(arguments);
			let fn = function(){
				let arg_fn = Array.prototype.slice.call(arguments);
				return add.apply(null,args.concat(arg_fn))
			};
			fn.valueOf = function(){
				return args.reduce(function(a,b){
					return a + b
				},0)
			};
			return fn;
		}
		add(1,2,3,4,5) // 15
		add(1,2,3)(4,5) // 15
		add(1)(2)(3)(4)(5) // 15
		
	4、new 关键字
		function Person(name){this.name = name;}
		Person.prototype.sayName = function(){console.log(this.name)}
		// 模拟new的过程
		var objectFactory = function(){
			var obj = new Object(), // step1 创建一个新对象 
				Constructor = [].shift.call(arguments); // 取得构造器，第一个参数，写法很装逼
				obj.__proto__ = Constructor.prototype; // step2 改变新对象的原型指向
				var ret = Constructor.apply(obj,arguments); // step3 给新对象设置属性(继承父原型)
				return typeof ret === 'object' ? ret : obj; // step4 返回新对象
		}
		var a = objectFactory(Person,'laozhang');// 效果一样 new Person('laozhang')
		a instanceof Person // true;

七、从url输入到页面展现：
   1：DNS解析：将域名解析成IP地址;
	  浏览器缓存->系统缓存->hosts是否有对应IP->
	  浏览器向DNS服务器发送域名，DNS查询到与域名对应的IP地址，返回给浏览器。
   2：建立TCP链接：TCP三次握手
	  客户端发送数据包到服务器端口(1,浏览器告诉服务器我要发送请求了)
	  服务器返回响应包以示传达确认信息(2,服务器告诉浏览器，准备完毕，可以发送请求了)
	  浏览器回传数据包,握手结束(3,浏览器告诉服务器马上发送了)
   3：发送HTTP请求;
   4：服务器处理请求并返回HTTP报文;
   5：浏览器解析渲染页面;
	  浏览器拿到相应文本HTML,根据HTML解析DOM树,
	  根据CSS解析生成CSS规则树,
	  结合DOM树和CSS树生成渲染树，
	  根据渲染树计算每个节点信息
	  根据计算结果绘制页面
   6：断开链接：数据传送完毕，断开TCP链接，发起TCP四次挥手.
	  浏览器向服务器发送报文,Fin、Ack、Seq,表示数据传输完毕。进入FIN_WAIT_1状态。
	  服务器向浏览器发送报文,Ack、Seq,表示同意关闭请求。进入FIN_WAIT_2状态。
	  服务器向浏览器发送报文段,Fin、Ack、Seq,请求关闭链接。进入LAST_ACK状态。
	  浏览器向服务器发送报文段,Ack、Seq。进入TIME_WAIT状态。服务器收到报文段后关闭链接。浏览器等待一段时间未收到回复，则正常关闭。
	   
	
	
	
	
	
	
	
	
	
	
	
	
	
	