
#One：单例模式--保证一个类仅有一个实例，并提供一个访问它的全局访问点。
	尽量减少全局变量污染
	##1、使用命名空间
     var nameSpace = {
		a:function(){},
		b:function(){}
	 }
	 
	##2、使用闭包封装私有变量
	 var user = (function(){
		var _name = 'laozhang',
		    _age = 29;
		return {
			getUserInfo:function(){return _name+'-'+_age}
		}
	 })()
	 
	##3、通用惰性单例模式
	var getSingle = function(fn){
		var res;
		return function(){
			return res || (res = fn.apply(this,arguments))
		}
	}
	
#Two: 策略模式--定义一系列的算法，把他们都封装起来，并使他们可以互相替换。
	var strategies = {
		"S": function(salary){return salary*4},
		"A": function(salary){return salary*3},
		"B": function(salary){return salary*2}
	}
	var calculateBonus = function(level,salary){
		return strategies[level](salary)
	}
	calculateBonus('S',5000) // 20000
	
#Three：代理模式--为一个对象 提供一个代用品或占位符，以便控制对它的访问
	##1、虚拟代理把一些开销很大的对象，延迟到真正需要的时候再去创建。例如；等图片加载好了之后再显示正确图片。
		var myImg = (function(){
			var imgNode = document.createElement('img');
			document.body.appendChild(imgNode);
			return { setSrc: function(src){ imgNode.src = src } }
		})();
		var proxyImg = (function(){
			var img = new Image;
			img.onload = function(){ myImg.setSrc(this.src); }
			return {
				setSrc: function(src){
					myImg.setSrc('localhost:8080/imgs/loading.gif');
					img.src = src;
				}
			}
		})();
		proxyImg.setSrc('http://imgcache.qq.com/qq.jpg');
	##2、缓存代理可以为一些开销大的运算结果提供暂时的存储，再次运算时，如果传递过来的参数与之前的一致，则可以直接返回前面存储的运算结果。
		var mult = function(){
			var a = 1;
			for(var i=0;i<arguments.length;i++){
				a = a * arguments[i];
			}
			return a;
		}
		var proxyMult = (function(){
			var cache = {};
			return function(...arg){
				var args = agr.join(',');
				if(args in cache) return cache[args];
				return cache[args] = mult.apply(this,arg);
			}
		})();
		proxyMult(1,2,3,4)
	
#Four: 迭代器模式--指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。
	var each = function(arr,cb){
		for(var i=0,len=arr.length;i<len;i++){
			cb.call(arr[i],i,arr)
		}
	}
	each([1,2,3],function(item,index){})
	
#Five：发布-订阅模式(观察者模式)--定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。
	dom.addEventListener('eventName',fn)// JS中的发布-订阅模式
	var Event = (function(){
		var clientList = {};
		
		var listen = function(key,fn){
			if(!clientList[key]){
				clientList[key] = [];
			}
			clientList[key].push(fn);
		}
		var trigger = function(...arg){
			var key = arg.shift(),
				fns = clientList[key];
			if(!fns || fns.length<1){
				return false;
			}
			for(var i=0,fn;fn=fns[i++];){
				fn.apply(this,arg)
			}
		}
		var remove = function(key,fn){
			var fns = clientList[key];
			if(!fns){
				return false
			}
			if(!fn){
				fns && (fns.length=0)
			}else {
				for(var l = 0; l < fns.length; l++){
					if(fns[l]==fn){
						fns.splice(l,1);
					}
				}
				
			}
		}
		return {
			listen: listen,
			trigger: trigger,
			remove: remove
		}
	})();
	var fnA = function(a){console.log(a+'AAAAA')}
	Event.listen('eventA',fnA)// 订阅
	Event.trigger('eventA','triggerA----')// 发布
	Event.remove('eventA',fnA)// 取消订阅

#Six：命令模式--向某些对象发送请求，但并不知道请求的接受者是谁，也不知道被请求的操作是什么，发布命令者与接受者解耦
	var btn = document.querySellctor('btn');
	var setCommand = function(dom,command){
		dom.onclick = function(){command.excute()}//执行命令
	}
	var eventBar = {
		refresh: function(){//dosomething}
	}
	var RefreshCommand = function(receiver){
		return {
			excute:function(){
				receiver.refresh();
			}
		}
	}
	var refreshCommand = RefreshCommand(eventBar);
	setCommand(btn, refreshCommand)//发布命令
	
#Seven：组合模式--组合模式将对象组合成树形结构，以表示“部分-整体”的层次结构。可以让我们使用树形结构的对象。
	var Folder = function(name){
		this.name = name;
		this.files = [];
	}
	Folder.prototype.add = function(file){this.files.push(file)}
	Folder.prototype.scan = function(){
		console.log('开始扫描：' + this.name);
		for(var i=0,i<this.files.length;i++){
			this.files[i].scan();
		}
	}
	
	var File = function(name){
		this.name = name;
	}
	File.prototype.add = function(){
		throw new Error('这是文件，不是文件夹')
	}
	File.prototype.scan = function(){console.log('开始扫描文件--'+this.name)}
	
	var folder = new Folder('学习资料');
	var folder1 = new Folder('JavaScript');
	var folder2 = new Folder('Jquery');
	var folder3 = new Folder('Nodejs');
	
	var file1 = new File('JavaScript高级程序设计');
	var file2 = new File('精通Jquery');
	var file3 = new File('重构与模式');
	var file4 = new File('深入浅出Node.js');
	var file5 = new File('JavaScript设计模式与开发实践');
	
	folder1.add(file1);
	folder2.add(file2);
	folder3.add(file4);
	
	folder.add(folder1);
	folder.add(folder2);
	folder.add(file3);
	folder.add(file5);
	folder.add(folder3);
	
	folder.scan();
	
#Eight：模板方法模式--一种只需要使用继承就可以实现的模式，由抽象父类和具体实现子类两部分构成。
	var Dad = function(a,b,c){
		this.a = a;
		this.b = b;
		this.c = c;
		this.fn1 = function(){console.log(this.a)}
		this.fn2 = function(){console.log(this.b+'--'+this.c)}
		this.init = function(){
			this.fn1();
			this.fn2();
		}
	}
	var Son1 = function(){
		Dad.call(this,...arguments)
	};

	var Son2 = function(){
		Dad.call(this,...arguments)
	};
	var son1 = new Son1(1,2,3);
	var son2 = new Son2('a','b','c');
	son1.init();
	son2.init();
	
#Nine：享元模式--核心是援用共享技术来有效支持大量细粒度的对象。为了解决性能问题而生的模式。
	适用情况：
		一个程序中使用大量相似的对象，造成大的内存开销，将相似的状态剥离出来，使用相对较少的共享对象取代，
	
#Ten：职责链模式--使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。
	var order500 = function(orderType,pay,stock){
		if(orderType==1&&pay){
			console.log('500定金，得到100元优惠券')
		}else{
			return 'nextSuccessor';
		}
	}
	var order200 = function(orderType,pay,stock){
		if(orderType==2&&pay){
			console.log('200定金，得到50元优惠券')
		}else {
			return 'nextSuccessor';
		}
	}
	var orderNormal = function(orderType,pay,stock){
		if(stock > 0){
			console.log('普通购买，无优惠券')
		}else {
			console.log('手机库存不足')
		}
	}
	Function.prototype.after = function(fn){
		var self = this;
		return function(){
			var ret = self.apply(this,arguments);
			if(ret == 'nextSuccessor'){
				return fn.apply(this,arguments);
			}
			return ret;
		}
	}
	var order = order500.after(order200).after(orderNormal);
	order(1,true,500)
	order(2,true,500)
	
#Eleven：中介者模式--对于多个紧耦合的对象，新增一个中介者对象，所有产生耦合的操作都放入中介者，当一个对象发生改变时，只需要通知中介者，由中介者通知其他对象。
	如果对象之间的复杂耦合导致调用维护困难，考虑使用中介者模式来重构。
	
#Twelve：装饰者模式--动态的给对象增加职责。
	##simple
	var obj = {
		fn1:function(){}
	}
	obj.fn2 = function(){
		this.fn1();
		//fn2 do something
	}
	obj.fn3 = function(){
		this.fn2();
		//fn3 do something
	}
	
	##AOP 
	Function.prototype.before = function(fn){
		var _this = this;
		return function(){
			fn.apply(this,arguments);
			return _this.apply(this,arguments);
		}
	}
	Function.prototype.after = function(fn){
		var _this = this;
		return function(){
			var ret = _this.apply(this,arguments);
			fn.apply(this,arguments);
			return ret;
		}
	}
	var fn = function(){ console.log('fn') }
	fn = fn.before(()=>console.log('before fn')).after(()=>console.log('after fn'));
	fn()
	
#Thirteen：状态模式--区分事物内部的状态，事物内容部状态的改变往往会带来事物的行为变化。
	react中的state
	var FSM = {
		off:{
			buttonPressed:function(){
				console.log('关灯');
				this.button.innerHTML = '下一次按我是开灯';
				this.currState = FSM.on;
			}
		},
		on:{
			buttonPressed:function(){
				console.log('开灯');
				this.button.innerHTML = '下一次按我是关灯';
				this.currState = FSM.off;
			}
		}
	}
	var Light = function(){
		this.currState = FSM.off;
		this.button = null;
	}
	Light.prototype.init = function(){
		var btn = document.createElement('button');
		var _this = this;
		btn.innerHTML = '已关灯'
		_this.button = document.body.appendChild(btn);
		_this.button.onclick = function(){
			_this.currState.buttonPressed.call(_this);
		}
	}
	var light = new Light();
	light.init();

#Fourteen：适配器模式--将不同的对象包装成统一的结构，以便调用。
	var a = {
		fn1:function(){console.log('aaa')}
	}
	var b = {
		fn2:function(){console.log('bbb')}
	}
	// 包装B
	var bAdapter = {
		fn1: function(){
			return b.fn2();
		}
	}
	var render = function(obj){
		obj.fn1();
	}
	// 统一调用
	render(a);
	render(bAdapter);
	
	
	
	
	
	
	
	
	
	
	