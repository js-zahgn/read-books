O(n)的理解：
时间复杂度这个东西，其实更准确点说应该是描述一个算法在问题规模不断增大时对应的时间增长曲线。所以这些增长数量级不是一个准确的性能评价，可以理解为一个近似值，时间的增长近似于logN、NlogN的曲线。
O(x)指的是时间复杂度。
O(1)对应哈希表，每次查找都由唯一下标查找，只需要一次查找就能返回结果。例如去买烟，顾客说出烟名，老板直接给烟;
O(n)随着样本数量的增加，复杂度随之线性增加。需要序贯处理的算法的复杂度都不回低于O(n)。例如数数1-100要100秒，1-200不少于200秒;
O(n^2)计算复杂度随着样本数量的增加呈平方数增加。例如从n张试卷中取出分数最高的，然后再取第二的。。。需要反复n次。每次的复杂度是O(n)，执行n次,所以时间复杂度为O(n^2);
O(nlogn) 例如二叉搜索树。前提为n张试卷已经按分数高低排好，取分数为59的，先取中间那张，如果大于59则取上面的，再从上半部分中间取出一张跟59对比。。。
n/2^k = 1 => k = log2n.


树：非顺序数据结构。一个树结构包含一系列存在父子关系的节点。树顶部叫根节点，它没有父节点。树中每个元素都叫做节点，至少又一个子节点的叫内部节点，没有子节点的叫外部节点或叶节点。

二叉树:节点最多只能有左右两个子节点。
function BinarySeacrhTree(){
	var Node = function(key){
		this.key = key;
		this.left = null;
		this.right = null;
	}
	var root = null;
	
	function insertNode(node,newNode){
		if(newNode.key < node.key){
			if(node.left === null){
				node.left = newNode;
			} else {
				insertNode(node.left, newNode);
			}
		} else {
			if(node.right === null){
				node.right = newNode;
			} else {
				insertNode(node.right, newNode);
			}
		}
	}
	
	// 插入节点
	this.insert = function(key){
		var newNode = new Node(key);
		if(root===null){
			root = newNode;
		} else {
			insertNode(root,newNode);
		}
	}
	
	function searchNode(node,key){
		if(node === null){
			return false;
		}
		if(key < node.key){
			return searchNode(node.left,key);
		} else if(key > node.key){
			return searchNode(node.right, key);
		} else {
			return true;
		}
	}
	// 搜索获取节点
	this.search = function(key){
		return searchNode(root,key);
	}
	
	function inTraverseNode(node,cb=function(val){console.log(val)}){
		if(node!==null){
			inTraverseNode(node.left, cb);
			cb(node.key);
			inTraverseNode(node.right, cb);
		}
	}		
	// 通过中序遍历方式遍历所有节点
	this.inOrderTraverse = function(cb){
		inTraverseNode(root,cb);
	}
	
	function preOrderTraverseNode(node,cb=function(val){console.log(val)}){
		if(node!==null){
			cb(node.key);
			preOrderTraverseNode(node.left,cb);
			preOrderTraverseNode(node.right,cb);
		}
	}
	// 通过先序遍历方式遍历所有节点
	this.preOrderTraverse = function(cb){
		preOrderTraverseNode(root,cb)
	}
	function postOrderTraverseNode(node,cb=function(val){console.log(val)}){
		if(node!==null){
			postOrderTraverseNode(node.left,cb);
			postOrderTraverseNode(node.right,cb);
			cb(node.key);
		}
	}
	// 通过后序遍历方式遍历所有界定啊
	this.postOrderTraverse = function(cb){
		postOrderTraverseNode(root,cb)
	}
	// 返回树中最小的值/键
	this.min = function(){
		var node = root;
		if(node){
			while(node && node.left !== null){
				node = node.left;
			}
			return node.key;
		}
		return null;
	}
	// 返回树中最大的值/键
	this.max = function(){
		var node = root;
		if(node){
			while(node && node.right !== null){
				node = node.right;
			}
			return node.key;
		}
		return null;
	}
	
	function removeNode(node,key){
		if(node === null){ // 2
			return null;
		}
		if(key < node.key){ // 3
			node.left = removeNode(node.left,key); // 4
			return node; // 5
		} else if(key > node.key){ // 6
			node.right = removeNode(node.right,key); // 7
			return node; // 8
		} else {
			// 键等于node.key
			// 一个叶节点
			if(node.left === null && node.right === null){ // 9
				node = null; // 10
				return node; // 11
			}
			
			// 只有一个子节点的节点
			if(node.left === null){ // 12
				node = node.right; // 13
				return node; // 14
			} else if(node.right === null){ // 15
				node = node.right; // 16
				return node; // 17
			}
		
			// 有两个子节点的节点
			var aux = (function(n){
				while(n && n.left !== null){
					n = n.left;
				}
				return n;
			})(node.right) // 18
			node.key = aux.key; // 19
			node.right = removeNode(node.right, aux.key); // 20
			return node; // 21
		}
	}
	// 删除一个键
	this.remove = function(key){
		root = removeNode(root,key);
	}
}

//定义节点
class Node {
  constructor(key) {
	this.key = key;
	this.left = null;
	this.right = null
  }
}
//创建平衡二叉搜索树(avl树)
class AVLTree {
  constructor() {
	this.root = null
  }
  getNodeHeight(node){
	if(node === null) return 0;
	else{
		const leftHeight = this.getNodeHeight(node.left);
		const rightHeight = this.getNodeHeight(node.right);
		// 返回左子树、右子树中最大高度
		return (leftHeight>rightHeight?leftHeight:rightHeight)+1;
	}
  }
  
  // 平衡树结构
  balance(node){
	if(node === null) return node;
	
	// 左单旋
	const _rotateLeft = (avlNode)=>{
		let node = avlNode.right; // 保存avlNode右子节点
		// 将avlNode的右子节点指向node(原avlNode的右子节点)的左子节点
		avlNode.right = node.left; 
		node.left = avlNode; // 将node的左子节点指向node
		return node; // 返回node取代原来的avlNode
	}
	
	// 右单旋
	const _rotateRight = (avlNode)=>{
		let node = avlNode.left;
		avlNode.left = node.right;
		node.right = avlNode;
		return node;
	}
	
	// 左-右双旋
	const _rotateLeftRight = (avlNode)=>{
		avlNode.left = _rotateLeft(avlNode.left); // 先对左子节点进行左单旋
		return _rotateRight(avlNode); // 再对avlNode进行右单旋
	}
	
	// 右-左双旋
	const _rotateRightLeft = (avlNode)=>{
		avlNode.right = _rotateRight(avlNode.right);
		return _rotateLeft(avlNode);
	}
	
	// 当左子树比右子树高1以上
	if(this.getNodeHeight(node.left) - this.getNodeHeight(node.right) > 1){
		// 左子树的左子树高度不小于左子树的右子树高度
		if(this.getNodeHeight(node.left.left) >=this.getNodeHeight(node.left.right)){
			// 直接进行右单旋
			node = _rotateRight(node);
		} else {
			// 左子树的右子树高度大于左子树的左子树
			node = _rotateLeftRight(node);
		}
		// 右子树高度比左子树高度高1以上
	} else if(this.getNodeHeight(node.right) - this.getNodeHeight(node.left) > 1){
		// 当右子树的右子树高度不小于右子树的左子树
	  if(this.getNodeHeight(node.right.right)>=this.getNodeHeight(node.right.right)){
		// 进行左单旋
		node = _rotateLeft(node);
	  } else {
		node = _rotateRightLeft(node);
	  }
	}
	
	return node;
  }

  //插入节点
  insert(key) {
	const _insertNode = (node, newNode) => {
	  if(node === null){
		node = newNode;
		return node;
	  } else if (newNode.key < node.key) {
		if (node.left === null) {
		  node.left = newNode;
		  return node;
		} else {
		  node.left = _insertNode(node.left, newNode);
		  // 平衡树
		  node = this.balance(node);
		}
	  } else {
		if (node.right === null) {
		  node.right = newNode；
		  return node;
		} else {
		  node.right = _insertNode(node.right, newNode);
		  node = this.balance(node);
		}
	  }
	  return node;
	};
	const newNode = new Node(key);
	this.root = _insertNode(this.root, newNode);
  }
  //中序遍历
  inOrder() {
	let backs = [];
	const inOrderNode = (node, callback) => {
	  if (node !== null) {
		inOrderNode(node.left, callback);
		backs.push(callback(node.key));
		inOrderNode(node.right, callback)
	  }
	};
	inOrderNode(this.root, callback);

	function callback(v) {
	  return v
	}
	return backs
  }
  //前序遍历
  preOrder() {
	let backs = [];
	const preOrderNode = (node, callback) => {
	  if (node !== null) {
		backs.push(callback(node.key));
		preOrderNode(node.left, callback);
		preOrderNode(node.right, callback)
	  }
	};
	preOrderNode(this.root, callback);

	function callback(v) {
	  return v
	}
	return backs
  }
  //后序遍历
  postOrder() {
	let backs = [];
	const postOrderNode = (node, callback) => {
	  if (node !== null) {
		postOrderNode(node.left, callback);
		postOrderNode(node.right, callback);
		backs.push(callback(node.key))
	  }
	};
	postOrderNode(this.root, callback);

	function callback(v) {
	  return v
	}
	return backs
  }
  //查找最小值
  getMin(node) {
	const minNode = node => {
	  return node ? (node.left ? minNode(node.left) : node) : null
	};
	return minNode(node || this.root)
  }
  //查找最大值
  getMax(node) {
	const minNode = node => {
	  return node ? (node.right ? minNode(node.right) : node) : null
	};
	return minNode(node || this.root)
  }
  //查找特定值
  find(key) {
	const findNode = (node, key) => {
	  if (node === null) return false;
	  if (node.key === key) return node;
	  return findNode((key < node.key) ? node.left : node.right, key)
	};
	return findNode(this.root, key)

  }
  //删除节点
  remove(key) {
	const _removeNode = (node, key) => {
	  if (node === null) return null;
	  if (key < node.key) {
		node.left = _removeNode(node.left, key);
		node = this.balance(node);
		return node;
	  } else if(key > node.key){
		node.right = _removeNode(node.right, key);
		node = this.balance(node);
		return node;
	  } else {
		if (node.left === null && node.right === null) return null;
		if (node.left === null) return node.right;
		if (node.right === null) return node.left;
		if (node.left !== null && node.right !== null) {
		  let _node = this.getMin(node.right);
		  node.key = _node.key;
		  node.right = _removeNode(node.right, key);
		  node = this.balance(node);
		  return node;
		}
	  }
	};
	return _removeNode(this.root, key);
  }
}

典型二叉平衡树：AVL(自平衡)二叉查找树，红黑树...
AVL树：任何节点的两个子树的高度差最大为1，AVL树的查找、插入和删除在平均和最坏情况下都是O(logn)。在AVL树中进行插入和删除节点后，可能导致AVL树失去平衡。数去平衡的节点需要成为根节点才能解决问题。不管执行插入和删除，只要不满足平衡条件，就要通过旋转来保持平衡，旋转是很耗时的，因此AVL树结构适合用于查找多，增删次数少的情况。

红黑树：不是高度平衡的，插入最多旋转两次，删除最多旋转三次。适合操作操作多的场景。
 1、每个节点都是红色或者黑色
 2、根节点是黑色
 3、每个叶节点都是黑色(为null的子节点)
 4、如果一个节点是红色，则他的两个子节点都是黑色
 5、对每个节点，从该节点到期所有后代叶节点的简单路径上，均包含相同数目的黑色节点。
 ***一棵含有n个节点的红黑树的高度至多为2log(n+1)***
 ***高度为h的红黑树，它的包含的内节点个数至少为 2h/2-1个***
 ***红黑树的增查删的时间复杂度最坏为O(log n)***
 
	let Colors = {
	  RED: 0,
	  BLACK: 1
	};

	class Node {
	  constructor(key, color) {
		this.key = key;
		this.left = null;
		this.right = null;
		this.color = color;

		this.flipColor = function () {
		  if (this.color === Colors.RED) {
			this.color = Colors.BLACK;
		  } else {
			this.color = Colors.RED;
		  }
		};
	  }
	}

	class RedBlackTree {
	  constructor() {
		this.root = null;
	  }

	  isRed(node) {
		if (!node) {
		  return false;
		}
		return node.color === Colors.RED;
	  }

	  rotateLeft(node) {
		let temp = node.right;
		if (temp !== null) {
		  node.right = temp.left;
		  temp.left = node;
		  temp.color = node.color;
		  node.color = Colors.RED;
		}
		return temp;
	  }

	  rotateRight(node) {
		let temp = node.left;
		if (temp !== null) {
		  node.left = temp.right;
		  temp.right = node;
		  temp.color = node.color;
		  node.color = Colors.RED;
		}
		return temp;
	  }

	  insertNode(node, element) {

		if (node === null) {
		  return new Node(element, Colors.RED);
		}

		let newRoot = node;

		if (element < node.key) {

		  node.left = this.insertNode(node.left, element);

		} else if (element > node.key) {

		  node.right = this.insertNode(node.right, element);

		} else {
		  node.key = element;
		}

		if (this.isRed(node.right) && !this.isRed(node.left)) {
		  newRoot = this.rotateLeft(node);
		}

		if (this.isRed(node.left) && this.isRed(node.left.left)) {
		  newRoot = this.rotateRight(node);
		}
		if (this.isRed(node.left) && this.isRed(node.right)) {
		  node.left.flipColor();
		  node.right.flipColor();
		}

		return newRoot;
	  }

	  insert(element) {
		this.root = this.insertNode(this.root, element);
		this.root.color = Colors.BLACK;
	  }
	}


 B-Tree ：主要用于文件系统以及部分数据库索引，如MongoDB
 B+Tree : 主要用于关系型数据库索引
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 