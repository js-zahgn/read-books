图 ：非线性数据结构，是网络结构的抽象模型。图是一组由边连接的节点(顶点)。
数学概念：G = (V,E); V:一组顶点; E:一组边，连接V中的顶点。
术语：
相邻顶点 -- 由一条边连接在一起的顶点称为相邻顶点。
度 -------- 一个顶点的度是其相邻顶点的数量。
路径 ------ 路径是顶点V1,V2,...,VK的一个连续序列，其中Vi和Vi+1是相邻的。
简单路径 -- 要求不包含重复的顶点的路径。
环 -------- 起始顶点和最后一个顶点是同一个顶点的简单路径。
			如果途中不存在环，则称该图是无环的。
			如果图中每两个顶点间都存在路径，则该图是连通的。
			
图可以是无向的(边没有方向)或者有向的(有向图)。

邻接矩阵：每个节点都和同一个整数相关联，该正数将作为数组的索引。
	      可以用一个二维数组表示顶点之间的连接。
		  如果索引为i的节点和索引为j的节点相邻，
		  则array[i][j] === 1，否则array[i][j] === 0.
		  
邻接表：邻接表由图中每个顶点的相邻顶点列表所组成。
		可以用列表(数组)、链表、散列表、字典来存储相邻顶点。
		
关联矩阵：在关联矩阵中，矩阵的行表示顶点，列表示变。
          可以使用二维数组来表示两者之间的连通性。
		  常用于边的数量比顶点多的情况，节省空间和内存。

图的遍历：
1、广度优先搜索：Breadth-First Search, BFS
                 通过将顶点存入队列中，最先进入队列的顶点先被探索。
2、深度优先搜索：Depth-First Search, DFS
                 通过将顶点存入栈中，顶点是沿着路径被探索的，存在新的相邻顶点就去访问。

    白色---该顶点未被访问
	灰色---该顶点已被访问过，但未被探索
	黑色---该顶点被访问且被完全探索过


// 邻接表		  
function Graph(){
	var vertices = []; // 用来存储所有顶点的名字
	var adjList = {}; // 使用顶点名字作为键，邻接顶点列表作为值。
	
	// 添加新顶点
	this.addVertex = function(v){
		vertices.push(v);
		adjList[v] = [];
	}
	
	// 添加相邻顶点
	this.addEdge = function(v, w){
		adjList[v].push(w);
		adjList[w].push(v);
	}
	
	this.print = function(){
		var res = '';
		vertices.reduce((res,cur)=>{},'')
	}
	var initColor = function(){
		var color = [];
		for(var i=0;i<vertices.length;i++){
			color[vertices[i]] = 'white';
		}
		return color;
	}
	// 广度优先
	this.bfs = function(v, cb){
		var color = initColor(),
			queue = new Queue();
		queue.enqueue(v);
		
		while(!queue.isEmpty()){
			var u = queue.dequeue(),
				neighbors = adjList[u];
			color[u] = 'grey';
			for(var i=0;i<neighbors.length;i++){
				var w = neighbors[i];
				if(color[w]==='white'){
					color[w] = 'grey';
					queue.enqueue(w);
				}
			}
			color[u] = 'black';
			if(cb){
				cb(u);
			}
		}
	}
}

var graph = new Graph();
var points = ['A','B','C','D','E','F','G','H','I'];
for(var i=0;i<points.length;i++){
	graph.addVertex(points[i]);
}
graph.addEdge('A','B');
graph.addEdge('A','C');
graph.addEdge('A','D');
graph.addEdge('C','D');
graph.addEdge('C','G');
graph.addEdge('D','G');
graph.addEdge('D','H');
graph.addEdge('B','E');
graph.addEdge('B','F');
graph.addEdge('E','I');













































